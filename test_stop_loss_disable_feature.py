#!/usr/bin/env python3
"""
Test script to verify the stop-loss disable feature implementation
"""

import asyncio
import yaml
from unittest.mock import Mock, AsyncMock
from src.trading.real_trading_engine import RealTradingEngine

async def test_stop_loss_disable_feature():
    """Test that stop-loss can be disabled via configuration"""
    
    print("üß™ Testing Stop-Loss Disable Feature")
    print("=" * 50)
    
    # Test 1: Default behavior (stop-loss enabled)
    print("\n1. Testing default behavior (stop-loss enabled)")
    config_default = {
        "real_trading": {
            "enabled": True,
            "stake_usd": 100.0,
            "max_positions": 20,
            "accept_sources": ["opportunity_manager"],
            # No explicit enable_stop_loss flag - should default to True
        }
    }
    
    mock_exchange = Mock()
    engine_default = RealTradingEngine(config_default, mock_exchange)
    
    print(f"   enable_take_profit: {engine_default.enable_take_profit}")
    print(f"   enable_stop_loss: {engine_default.enable_stop_loss}")
    
    assert engine_default.enable_take_profit == True, "Take profit should be enabled by default"
    assert engine_default.enable_stop_loss == True, "Stop loss should be enabled by default"
    print("   ‚úÖ Default behavior correct")
    
    # Test 2: Explicitly disable stop-loss
    print("\n2. Testing stop-loss disabled")
    config_disabled = {
        "real_trading": {
            "enabled": True,
            "stake_usd": 100.0,
            "max_positions": 20,
            "accept_sources": ["opportunity_manager"],
            "enable_take_profit": True,
            "enable_stop_loss": False  # Explicitly disable
        }
    }
    
    engine_disabled = RealTradingEngine(config_disabled, mock_exchange)
    
    print(f"   enable_take_profit: {engine_disabled.enable_take_profit}")
    print(f"   enable_stop_loss: {engine_disabled.enable_stop_loss}")
    
    assert engine_disabled.enable_take_profit == True, "Take profit should be enabled"
    assert engine_disabled.enable_stop_loss == False, "Stop loss should be disabled"
    print("   ‚úÖ Stop-loss disabled correctly")
    
    # Test 3: Both disabled
    print("\n3. Testing both TP and SL disabled")
    config_both_disabled = {
        "real_trading": {
            "enabled": True,
            "stake_usd": 100.0,
            "max_positions": 20,
            "accept_sources": ["opportunity_manager"],
            "enable_take_profit": False,
            "enable_stop_loss": False
        }
    }
    
    engine_both_disabled = RealTradingEngine(config_both_disabled, mock_exchange)
    
    print(f"   enable_take_profit: {engine_both_disabled.enable_take_profit}")
    print(f"   enable_stop_loss: {engine_both_disabled.enable_stop_loss}")
    
    assert engine_both_disabled.enable_take_profit == False, "Take profit should be disabled"
    assert engine_both_disabled.enable_stop_loss == False, "Stop loss should be disabled"
    print("   ‚úÖ Both TP and SL disabled correctly")
    
    # Test 4: Status reporting includes the flags
    print("\n4. Testing status reporting")
    status = engine_disabled.get_status()
    
    print(f"   Status includes enable_take_profit: {'enable_take_profit' in status}")
    print(f"   Status includes enable_stop_loss: {'enable_stop_loss' in status}")
    print(f"   enable_take_profit value: {status.get('enable_take_profit')}")
    print(f"   enable_stop_loss value: {status.get('enable_stop_loss')}")
    
    assert 'enable_take_profit' in status, "Status should include enable_take_profit"
    assert 'enable_stop_loss' in status, "Status should include enable_stop_loss"
    assert status['enable_take_profit'] == True, "Status should show TP enabled"
    assert status['enable_stop_loss'] == False, "Status should show SL disabled"
    print("   ‚úÖ Status reporting correct")
    
    # Test 5: Verify config.yaml structure
    print("\n5. Testing config.yaml structure")
    try:
        with open('config/config.yaml', 'r') as f:
            config_yaml = yaml.safe_load(f)
        
        real_trading_config = config_yaml.get('real_trading', {})
        
        print(f"   enable_take_profit in config: {'enable_take_profit' in real_trading_config}")
        print(f"   enable_stop_loss in config: {'enable_stop_loss' in real_trading_config}")
        print(f"   enable_take_profit value: {real_trading_config.get('enable_take_profit')}")
        print(f"   enable_stop_loss value: {real_trading_config.get('enable_stop_loss')}")
        
        assert 'enable_take_profit' in real_trading_config, "Config should have enable_take_profit"
        assert 'enable_stop_loss' in real_trading_config, "Config should have enable_stop_loss"
        assert real_trading_config['enable_take_profit'] == True, "Config should have TP enabled"
        assert real_trading_config['enable_stop_loss'] == False, "Config should have SL disabled"
        print("   ‚úÖ Config.yaml structure correct")
        
    except Exception as e:
        print(f"   ‚ùå Error reading config.yaml: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ All tests passed! Stop-loss disable feature implemented correctly.")
    print("\nKey Features Implemented:")
    print("‚úÖ Config-based control via enable_stop_loss flag")
    print("‚úÖ Backward compatibility (defaults to True)")
    print("‚úÖ Independent control of TP and SL")
    print("‚úÖ Status reporting includes configuration flags")
    print("‚úÖ UI display fields set to None when disabled")
    print("‚úÖ Logging when orders are disabled")
    
    print("\nUsage:")
    print("- Set 'enable_stop_loss: false' in config.yaml under real_trading section")
    print("- System will only place take-profit orders (if enabled)")
    print("- Position monitoring and trailing floor system remain active")
    print("- Manual position closure still available")
    
    return True

if __name__ == "__main__":
    asyncio.run(test_stop_loss_disable_feature())
